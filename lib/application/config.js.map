{"version":3,"sources":["../../src/application/config.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;kBAAyC,IAAI;;oCACvB,0BAA0B;;;;wBAE3B,UAAU;;;;AAC/B,MAAM,IAAI,GAAG,wBAAS,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;;;;;eAI7C,SAAS,UAAU,CAAC,GAAG,EAAE;AACrB,QAAI,GAAG,gBAAe,EAAE;AACpB,WAAG,CAAC,KAAK,GAAG,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,mBAAG,YAAW;AAC1C,kBAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;SACvC,CAAC;KACL,MAAM,IAAI,GAAG,gBAAe,EAAE;AAC3B,WAAG,CAAC,GAAG,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,MAAM,mBAAG,YAAW;AAC1C,kBAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;SACvC,CAAC;KACL;;AAED,gCAA2B,GAAG,CAAC,CAAC,OAAO,CAAC,UAAC,IAAI,EAAK;AAC9C,YAAI,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC;;;AAGrB,YAAI,OAAO,IAAI,IAAI,QAAQ,IAAI,CAAC,iBAAgB,IAAI,CAAC,EAAE;AACnD,sBAAU,CAAC,IAAI,CAAC,CAAC;SACpB;KACJ,CAAC,CAAC;;;AAGH,WAAO,eAAc,GAAG,CAAC,CAAC;CAC7B;;;;;AAEM,SAAS,YAAY,CAAC,GAAG,EAAE,IAAI,EAAE;AACpC,WAAO,oBAAW,GAAG,CAAC,OAAO,GAAG,SAAS,GAAG,IAAI,GAAG,OAAO,CAAC,CAAC;CAC/D;;;;;AAEM,SAAS,UAAU,CAAC,GAAG,EAAE,IAAI,EAAE;AAClC,QAAI,OAAO,GAAG,sBAAa,GAAG,CAAC,OAAO,GAAG,SAAS,GAAG,IAAI,GAAG,OAAO,CAAC,CAAC;AACrE,WAAO,oCAAU,OAAO,CAAC,CAAC;CAC7B;;;;AAEM,SAAS,YAAY,CAAC,GAAG,EAAE;AAC9B,UAAM,MAAM,GAAG,UAAU,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;AACzC,yBAAyB,UAAU,CAAC,GAAG,EAAE,GAAG,CAAC,WAAW,CAAC,6GAAE;;;;;;;;;;;;YAAjD,GAAG;YAAE,KAAK;;AAChB,cAAM,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;KAC1B;;AAED,QAAI,YAAY,CAAC,GAAG,EAAE,OAAO,CAAC,EAAE;AAC5B,8BAAyB,UAAU,CAAC,GAAG,EAAE,OAAO,CAAC,oHAAE;;;;;;;;;;;;gBAAzC,GAAG;gBAAE,KAAK;;AAChB,kBAAM,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;SAC1B;KACJ;;AAED,QAAI,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC;AACxD,QAAI,UAAU,EAAE;AACZ,cAAM,CAAC,GAAG,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;KACxC,MAAM,IAAI,IAAI,CAAC,IAAI,EAAE;AAClB,cAAM,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;AAC9B,cAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;KAC/B;;AAED,WAAO,UAAU,CAAC,MAAM,CAAC,CAAC;CAC7B","file":"config.js","sourcesContent":["import { existsSync, readFileSync } from 'fs';\nimport parseJSON from 'parse-json-object-as-map';\n\nimport minimist from 'minimist';\nconst argv = minimist(process.argv.slice(2));\n\n// To make obj fully immutable, freeze each object in obj.\n// Also makes Array, Map and Set read-only.\nfunction deepFreeze(obj) {\n    if (obj instanceof Map) {\n        obj.clear = obj.delete = obj.set = function() {\n            throw new Error('map is read-only');\n        };\n    } else if (obj instanceof Set) {\n        obj.add = obj.clear = obj.delete = function() {\n            throw new Error('set is read-only');\n        };\n    }\n\n    Object.getOwnPropertyNames(obj).forEach((name) => {\n        let prop = obj[name];\n\n        // Freeze prop if it is an object\n        if (typeof prop == 'object' && !Object.isFrozen(prop)) {\n            deepFreeze(prop);\n        }\n    });\n\n    // Freeze self\n    return Object.freeze(obj);\n}\n\nexport function existsConfig(app, name) {\n    return existsSync(app.dirname + 'config/' + name + '.json');\n}\n\nexport function loadConfig(app, name) {\n    let content = readFileSync(app.dirname + 'config/' + name + '.json');\n    return parseJSON(content);\n}\n\nexport function createConfig(app) {\n    const config = loadConfig(app, 'common');\n    for (let [key, value] of loadConfig(app, app.environment)) {\n        config.set(key, value);\n    }\n\n    if (existsConfig(app, 'local')) {\n        for (let [key, value] of loadConfig(app, 'local')) {\n            config.set(key, value);\n        }\n    }\n\n    let socketPath = argv['socket-path'] || argv.socketPath;\n    if (socketPath) {\n        config.set('socketPath', socketPath);\n    } else if (argv.port) {\n        config.set('port', argv.port);\n        config.delete('socketPath');\n    }\n\n    return deepFreeze(config);\n}\n"]}