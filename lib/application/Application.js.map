{"version":3,"sources":["../../src/application/Application.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;sBAAuD,UAAU;;sBACpC,UAAU;;2BACC,aAAa;;oBACd,MAAM;;oDAClB,yCAAyC;;;;oBACpB,MAAM;;kCAC3B,wBAAwB;;;;gCACpB,mBAAmB;;8CACZ,oCAAoC;;IAA9D,oBAAoB;;4CACI,kCAAkC;;IAA1D,kBAAkB;;AAE9B,MAAM,aAAa,uBAAe,CAAC;AACnC,MAAM,WAAW,qBAAa,CAAC;;;;;IAEV,WAAW;AACjB,aADM,WAAW,CAChB,OAAO,EAAE,WAAW,EAAE;;;8BADjB,WAAW;;AAExB,YAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AACvB,YAAI,CAAC,WAAW,GAAG,WAAW,CAAC;;AAE/B,cAAM,QAAQ,GAAG,mBAAY,OAAO,CAAC,CAAC;AACtC,YAAI,CAAC,KAAK,GAAG,eACT;AACI,kBAAM,EAAE,QAAQ,GAAG,UAAU;AAC7B,gBAAI,EAAE,QAAQ,GAAG,QAAQ;AACzB,eAAG,EAAE,QAAQ,GAAG,OAAO;AACvB,gBAAI,EAAE,QAAQ,GAAG,QAAQ;SAC5B,CACJ,CAAC;;AAEF,YAAI,CAAC,MAAM,GAAG,0BAAa,IAAI,CAAC,CAAC;AACjC,YAAI,CAAC,UAAU,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;;AAElD,cAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AACzC,YAAI,CAAC,MAAM,GAAG,+BAAkB,KAAK,EAAE,SAAS,IAAI,SAAS,CAAC,KAAK,IAAI,sBAAS,GAAG,CAAC,CAAC;;AAErF,YAAI,CAAC,MAAM,GAAG,0BAAa,IAAI,CAAC,CAAC;;AAEjC,YAAI,CAAC,WAAW,GAAG,UAAS,CAAC;AAC7B,cAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;AAChD,qBAAY,WAAW,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG,EAAI;AACpC,kBAAK,WAAW,CAAC,GAAG,CAAC,GAAG,EAAE,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;SAC/C,CAAC,CAAC;;AAEH,YAAI,CAAC,aAAa,CAAC,oBAAoB,CAAC,CAAC;AACzC,YAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,CAAC;;AAEvC,uBAAc,IAAI,CAAC,CAAC;KACvB;;iBAjCgB,WAAW;;;;;;;;;;;;;;;WAmCrB,UAAC,IAAI,EAAE;AACV,mBAAO,OAAO,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,CAAC;SACvC;;;;;;oCAEY,uBAAC,SAAS,EAAE;AACrB,gBAAI,SAAS,CAAC,UAAU,EAAE;AACtB,yBAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;aAC9B;;AAED,gBAAI,SAAS,CAAC,2BAA2B,EAAE;AACvC,yBAAS,CAAC,2BAA2B,CAAC,sBAAgB,SAAS,CAAC,CAAC;aACpE;;AAED,gBAAI,SAAS,CAAC,4BAA4B,EAAE;AACxC,yBAAS,CAAC,4BAA4B,CAAC,qBAAe,SAAS,CAAC,CAAC;aACpE;;AAED,gBAAI,SAAS,CAAC,2BAA2B,EAAE;AACvC,yBAAS,CAAC,2BAA2B,CAAC,6BAAe,SAAS,CAAC,CAAC;aACnE;SACJ;;;;;;+BAEW,sBAAC,IAAI,EAAE;AACf,mBAAO,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;SACpC;;;;;;+BAES,oBAAC,IAAI,EAAE;AACb,mBAAO,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;SAClC;;;WA/DgB,WAAW;;;kBAAX,WAAW","file":"Application.js","sourcesContent":["import { createConfig, existsConfig, loadConfig } from './config';\nimport { createRouter } from './router';\nimport { ConsoleLogger, LogLevel } from 'nightingale';\nimport { dirname as pathDirname } from 'path';\nimport ConsoleHandler from 'nightingale/lib/handlers/ConsoleHandler';\nimport { IncomingMessage, ServerResponse } from 'http';\nimport RequestContext from '../http/RequestContext';\nimport { defineProperty } from 'object-properties';\nimport * as translationComponent from '../components/translationComponent';\nimport * as validatorComponent from '../components/validatorComponent';\n\nconst _existsConfig = existsConfig;\nconst _loadConfig = loadConfig;\n\nexport default class Application {\n    constructor(dirname, environment) {\n        this.dirname = dirname;\n        this.environment = environment;\n\n        const dirname2 = pathDirname(dirname);\n        this.paths = Object.freeze(\n            {\n                public: dirname2 + '/public/',\n                data: dirname2 + '/data/',\n                tmp: dirname2 + '/tmp/',\n                logs: dirname2 + '/logs/',\n            }\n        );\n\n        this.config = createConfig(this);\n        this.production = !!this.config.get('production');\n\n        const logConfig = this.config.get('log');\n        this.logger = new ConsoleLogger('app', logConfig && logConfig.level || LogLevel.ALL);\n\n        this.router = createRouter(this);\n\n        this.controllers = new Map();\n        const controllers = this.require('controllers');\n        Object.keys(controllers).forEach(key => {\n            this.controllers.set(key, controllers[key]);\n        });\n\n        this.loadComponent(translationComponent);\n        this.loadComponent(validatorComponent);\n\n        Object.freeze(this);\n    }\n\n    require(path) {\n        return require(this.dirname + path);\n    }\n\n    loadComponent(component) {\n        if (component.initialize) {\n            component.initialize(this);\n        }\n\n        if (component.extendsHttpRequestPrototype) {\n            component.extendsHttpRequestPrototype(IncomingMessage.prototype);\n        }\n\n        if (component.extendsHttpResponsePrototype) {\n            component.extendsHttpResponsePrototype(ServerResponse.prototype);\n        }\n\n        if (component.extendsHttpContextPrototype) {\n            component.extendsHttpContextPrototype(RequestContext.prototype);\n        }\n    }\n\n    existsConfig(name) {\n        return _existsConfig(this, name);\n    }\n\n    loadConfig(name) {\n        return _loadConfig(this, name);\n    }\n}\n"]}