{"version":3,"sources":["../../src/http/HttpServerResponse.js"],"names":[],"mappings":"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","file":"HttpServerResponse.js","sourcesContent":["import { defineProperties, defineLazyProperty } from 'object-properties';\nimport { ServerResponse, STATUS_CODES } from 'http';\nimport { createReadStream } from 'fs';\nimport HttpError from './HttpError';\nimport HttpStatus from './HttpStatus';\nimport escape from 'escape-html';\nimport HtmlStackRenderer from 'alouette/lib/HtmlRenderer';\n\ndefineProperties(ServerResponse.prototype, {\n    /**\n     * @param {Object} params\n     * @param {string} params.content\n     * @param {string} params.filename\n     */\n    sendText({ content, filename }) {\n        this.writeHead(200, {\n            'Content-Type': 'text/plain',\n            'Accept-Ranges': 'none',\n            'Content-Length': content.length,\n            'Content-Disposition': 'attachment; filename=' + filename,\n        });\n\n        this.end(content);\n    },\n\n    /**\n     * @param {number} statusCode\n     * @return {HttpServerResponse} this\n     */\n    status(statusCode) {\n        this.statusCode = statusCode;\n        return this;\n    },\n\n    /**\n     * @param {string} string\n     */\n    text(string) {\n        this.setHeader('Content-Type', 'text/plain');\n        this.setHeader('Content-Length', string.length);\n        this.end(string);\n    },\n\n    /**\n     * @param {string} string\n     */\n    json(string) {\n        this.setHeader('Content-Type', 'application/json');\n        this.setHeader('Content-Length', string.length);\n        this.end(string);\n    },\n\n    /**\n     * @param {*} jsonValue\n     */\n    toJson(jsonValue) {\n        this.json(JSON.stringify(jsonValue));\n    },\n\n    /**\n     * @param {string} string\n     */\n    html(string) {\n        this.setHeader('Content-Type', 'text/html');\n        this.setHeader('Content-Length', string.length);\n        this.end(string);\n    },\n\n    /**\n     * @param {string} path\n     */\n    sendFile(path) {\n        return new Promise((resolve, reject) => {\n            createReadStream(path)\n                .pipe(this)\n                .on('end', resolve)\n                .on('error', reject);\n        });\n    },\n\n    /**\n     * @param {string} details details of the error, displayed even in production\n     * @param {Error} error\n     */\n    notFound(details, error) {\n        this.httpError(HttpError.notFound(details, error));\n    },\n\n    /**\n     * @param {HttpError} httpError\n     */\n    httpError(httpError) {\n        const isProduction = this.request.app.production;\n\n        if (!(httpError instanceof HttpError)) {\n            this.request.app.logger.warning('httpError is not an instance of HttpError');\n            httpError = S.HttpError.internalServerError(undefined, undefined, error);\n        }\n\n        let error = httpError;\n        while (error && !(error instanceof Error)) {\n            error = error.previous;\n        }\n\n        if (!isProduction && error) {\n            this.request.app.logger.error('httpError');\n            this.request.app.logger.error(error);\n        }\n\n        const status = httpError.status || 500;\n        this.status(status);\n\n        let body = (isProduction || !httpError.error ? STATUS_CODES[status] : httpError.error)\n                        + (httpError.details ? '\\n' + httpError.details : '');\n\n        const accepts = this.request.accepts(['text/html']);\n        if (accepts[0] === 'text/html') {\n            body = '<pre>' + escape(body) + '</pre>';\n\n            if (!isProduction) {\n                if (typeof httpError.error === 'string' && httpError.error.startsWith('<!DOCTYPE html>')) {\n                    body = httpError.error;\n                }\n\n                try {\n                    var htmlStackRenderer = new HtmlStackRenderer({ production: isProduction });\n\n                    if (error) {\n                        body += htmlStackRenderer.render(error);\n                    }\n                } catch (error2) {\n                    console.log(httpError.stack);\n                    console.log('err while log error:', error2.stack);\n                }\n            }\n\n            this.html(body);\n        } else {\n            this.text(body);\n        }\n    },\n\n    /**\n     * @param {number} [status]\n     * @param {string} url\n     */\n    redirect(status, url) {\n        if (url === undefined) {\n            url = status;\n            status = HttpStatus.FOUND;\n        }\n\n        let body;\n\n        const accepts = this.request.accepts(['text/html', 'text']);\n        if (accepts[0] === 'text/html') {\n            this.setHeader('Content-Type', 'text/html');\n            var escapedUrl = escape(url);\n            body = '<html><body><p>' + STATUS_CODES[status] + '.'\n                        + 'Redirecting to <a href=\"' + escapedUrl + '\">' + escapedUrl + '</a></p></body></html>';\n        } else if (accepts[0] === 'text') {\n            this.setHeader('Content-Type', 'text/plain');\n            body = STATUS_CODES[status] + '. Redirecting to ' + url;\n        }\n\n        this.setHeader('Location', url);\n        this.statusCode = status;\n        this.end(body);\n    },\n});\n"]}